#include "EXP.inc"
#include "ADDSUB.inc"
#include "MUL_FIXP.inc"

#define PLUS	1'b0
#define MINUS	1'b1

// ln2   = 18'b0000_10110001011100
// 1/ln2 = 18'b0001_01110001010101

module EXP{
	ADDSUB as[2];
	MUL_FIXP ms;
	reg xr[19], a[19], b[19], n[19], rr[19];
	proc_name calc_exp2(xr);
	proc_name calc_r(n);
	proc_name calc_er(rr);
	proc_name calc_ex(b);

	func calc{
		calc_exp2(x);
	}

	proc calc_exp2{
		// 正であれば+0.5、負であれば-0.5で四捨五入
		ms.exec(xr[18], xr[17:0], PLUS, 18'b0001_01110001010101);
		as[0].exec(ms.rs, ms.r, xr[18], 18'b0000_10000000000000);
		if(xr[18] == PLUS) alt{
			as[0].r[17:14] == 4'd0: a := 19'b0_0001_00000000000000; // 2^0 = 1
			as[0].r[17:14] == 4'd1: a := 19'b0_0010_00000000000000; // 2^1 = 2
			as[0].r[17:14] == 4'd2: a := 19'b0_0100_00000000000000; // 2^2 = 4
			as[0].r[17:14] == 4'd3: a := 19'b0_1000_00000000000000; // 2^3 = 8
		}
		else alt{
			as[0].r[17:14] == 4'd0: a := 19'b0_0001_00000000000000; // 2^0  = 1
			as[0].r[17:14] == 4'd1: a := 19'b0_0000_10000000000000; // 2^-1 = 0.5
			as[0].r[17:14] == 4'd1: a := 19'b0_0000_01000000000000; // 2^-2 = 0.25
			as[0].r[17:14] == 4'd1: a := 19'b0_0000_00100000000000; // 2^-3 = 0.125
		}
		calc_r({as[0].rs, as[0].r});
	}

	proc calc_r{
		ms.exec(n[18], n[17:0], PLUS, 18'b0000_10110001011100);
		as[0].exec(xr[18], xr[17:0], ~ms.rs, ms.r);
		calc_er({as[0].rs, as[0].r});
	}

	proc calc_er{
		as[0].exec(rr[18], rr[17:0], PLUS, 18'd1);
		ms.exec(rr[18], rr[17:0], rr[18], rr[17:0]);
		as[1].exec(as[0].rs, as[0].r, ms.rs, ms.r>>1);
		calc_ex({as[1].rs, as[1].r});
	}
	
	proc calc_ex{
		ms.exec(a[18], a[17:0], b[18], b[17:0]);
		y = {ms.rs, ms.r};
	}
}
