#include "SIGMOID.inc"
#include "ADDSUB.inc"
#include "MUL_FIXP.inc"

#define PLUS	1'b0
#define MINUS	1'b1

module SIGMOID{
	ADDSUB as;
	MUL_FIXP mf;
	wire p[19];

	func calc{
		if(x[18] == MINUS){
			alt{
				x[17:0] > 18'b0110_00000000000000:{ // x < -6.0
					y = 0;
				}
				x[17:0] > 18'b0101_00000000000000:{ // x < -5.0
					mf.exec(PLUS, 18'b0000_00000001000010 ,MINUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_00000110101111);
					y = {as.rs, as.r};
				}
				x[17:0] > 18'b0100_00000000000000:{ // x < -4.0
					mf.exec(PLUS, 18'b0000_00000010110010 ,MINUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_00001111010101);
					y = {as.rs, as.r};
				}
				x[17:0] > 18'b0011_00000000000000:{ // x < -3.0
					mf.exec(PLUS, 18'b0000_00000111010010 ,MINUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_00100000111111);
					y = {as.rs, as.r};
				}
				x[17:0] > 18'b0010_00000000000000:{ // x < -2.0
					mf.exec(PLUS, 18'b0000_00010001111100 ,MINUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_01000000010010);
					y = {as.rs, as.r};
				}
				x[17:0] > 18'b0001_00000000000000:{ // x < -1.0
					mf.exec(PLUS, 18'b0000_00100110001011 ,MINUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_01100111111110);
					y = {as.rs, as.r};
				}
				x[17:0] > 18'b0000_10110011001100:{ // x < -0.7
					mf.exec(PLUS, 18'b0000_00111100001010 ,MINUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_01111110101110);
					y = {as.rs, as.r};
				}
				else:{
					mf.exec(PLUS, 18'b0000_01000000000000 ,MINUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_10000000000000);
					y = {as.rs, as.r};
				}
			}
		}
		else{
			alt{
				x[17:0] > 18'b0110_00000000000000:{ // x > 6.0
					y = 1;
				}
				x[17:0] > 18'b0101_00000000000000:{ // x > 5.0
					mf.exec(PLUS, 18'b0000_00000001000010 ,PLUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_11111001010000);
					y = {as.rs, as.r};
				}
				x[17:0] > 18'b0100_00000000000000:{ // x > 4.0
					mf.exec(PLUS, 18'b0000_00000010110010 ,PLUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_11110000101010);
					y = {as.rs, as.r};
				}
				x[17:0] > 18'b0011_00000000000000:{ // x > 3.0
					mf.exec(PLUS, 18'b0000_00000111010010 ,PLUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_11011111000000);
					y = {as.rs, as.r};
				}
				x[17:0] > 18'b0010_00000000000000:{ // x > 2.0
					mf.exec(PLUS, 18'b0000_00010001111100 ,PLUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_10111111101101);
					y = {as.rs, as.r};
				}
				x[17:0] > 18'b0001_00000000000000:{ // x > 1.0
					mf.exec(PLUS, 18'b0000_00100110001011 ,PLUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_10011000000001);
					y = {as.rs, as.r};
				}
				x[17:0] > 18'b0000_10110011001100:{ // x > 0.7
					mf.exec(PLUS, 18'b0000_00111100001010 ,PLUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_10000001010001);
					y = {as.rs, as.r};
				}
				else:{
					mf.exec(PLUS, 18'b0000_01000000000000 ,PLUS, x[17:0]);
					p = {mf.rs, mf.r};
					as.exec(p[18], p[17:0], PLUS, 18'b0000_10000000000000);
					y = {as.rs, as.r};
				}
			}
		}
	}
}
